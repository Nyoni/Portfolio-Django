Projects App: Models

-If you want to store data to display on a website, then you’ll need a database.
-Typically, if you want to create a database with tables and columns within those
 you’ll need to use SQL to manage the database. 
-But when you use Django, you don’t need to learn a new language because it has a 
 built-in Object Relational Mapper (ORM).
-An ORM is a program that allows you to create classes that correspond to database
 tables. 
-Class attributes correspond to columns, and instances of the classes correspond 
 to rows in the database. 
-So, instead of learning a whole new language to create our database and its 
 tables, we can just write some Python classes.
-When you’re using an ORM, the classes you build that represent database tables 
are referred to as models. 
-In Django, they live in the models.py module of each Django app 
-In the projects app, you’ll only need one table to store the different projects 
you’ll display to the user. 
-That means you’ll only need to create one model in models.py.
-The model you’ll create will be called Project and will have the following fields:
   *title-> will be a short string field to hold the name of your project.
   *description-> will be a larger string field to hold a longer piece of text.
   *technology-> will be a string field, but its contents will be limited to a select
    number of choices.
   *image-> will be an image field that holds the file path where the image is stored.

-To create this model, we’ll create a new class in models.py and add the following 
 in our fields:


        from django.db import models
        
        class Project(models.Model):
            title = models.CharField(max_length=100)
            description = models.TextField()
            technology = models.CharField(max_length=20
            image = models.FilePathField(path="/img")

-Django models come with many built-in model field types. 
-We’ve only used three in this model. 
-CharField is used for short strings and specifies a maximum length.
-TextField is similar to CharField but can be used for longer form text as it 
 doesn’t have a maximum length limit. 
-Finally, FilePathField also holds a string but must point to a file path name.
*Now that we’ve created our Project class, we need Django to create the database.
-By default, the Django ORM creates databases in SQLite, but you can use other
 databases that use the SQL language, such as PostgreSQL or MySQL, with the Django ORM.
-To start the process of creating our database, we need to create a migration. 
-A migration is a file containing a Migration class with rules that tell Django 
what changes need to be made to the database. 
-To create the migration, type the following command in the console, making sure 
 you’re in the nyoni_portfolio directory:


            python manage.py makemigrations projects
            
            cd projectsMigrations for 'projects':
            projects/migrations/0001_initial.py
            - Create model Project

-Now that you’ve create a migration file, you need to apply the migrations 
 set out in the migrations file and create your database using the migrate command:            


python manage.py migrate projects


Note: When running both the makemigrations and migrate commands, we added projects
      to our command. This tells Django to only look at models and
      migrations in the projects app. Django comes with several models already
      created




-You should also see that a file called db.sqlite3 has been created in the root of
 your project. 
-Now your database is set up and ready to go. 
-You can now create rows in your table that are the various projects you want to 
 show on your site.
-To create instances of our Project class, we’re going to have to use the Django shell.
-The Django shell is similar to the Python shell but allows you to access the database 
 and create entries. 
-To access the Django shell, we use another Django management command:

        python manage.py shell

Once you’ve accessed the shell, you’ll notice that the command prompt will change
from $ to >>>. You can then import your models:

    from projects.models import Project

We’re first going to create a new project with the following attributes:

        name: My First Project
        description: A web development project.
        technology: Django
        image: img/project1.png
        
To do this, we create an instance of the Project class in the Django shell:

        >>> p1 = Project(
        ... title='My First Project',
        ... description='A web development project.',
        ... technology='Django',
        ... image='img/project1.png'
        ... )
        >>> p1.save()

-This creates a new entry in your projects table and saves it to the database. 
-Now you have created a project that you can display on your site.        

-You now know how to create models in Django.
-Build migration files so that you can translate these model classes into database tables. 
-Used the Django shell to create three instances of your model class